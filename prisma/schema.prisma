generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model assignments {
  idAssigment     Int              @id @default(autoincrement())
  titleAssignment String?          @db.VarChar(255)
  urlAssignment   String?          @db.VarChar(255)
  idLessons       Int
  lessons         lessons          @relation(fields: [idLessons], references: [idLessons], onDelete: NoAction, onUpdate: NoAction, map: "FK_Lesson_Assignment")
  assignmentuser  assignmentuser[]

  @@index([idLessons], map: "FK_Lesson_Assignment_idx")
}

model assignmentuser {
  assignmentId Int
  userId       Int
  isSubmit     Boolean?
  assignments  assignments @relation(fields: [assignmentId], references: [idAssigment], onDelete: NoAction, onUpdate: NoAction, map: "FK_Assignment_AssignmentUser")
  users        users       @relation(fields: [userId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_AssignmentUser")

  @@id([assignmentId, userId])
  @@index([assignmentId], map: "FK_Assignment_AssignmentUser_idx")
  @@index([isSubmit], map: "FK_Status_AssignmentUser_idx")
  @@index([userId], map: "FK_User_AssignmentUser_idx")
}

model chapters {
  idChapter    Int       @id @default(autoincrement())
  titleChapter String    @db.VarChar(255)
  courseId     Int
  isPublished  Boolean?
  orderChapter Int?
  description  String?   @db.VarChar(255)
  courses      courses   @relation(fields: [courseId], references: [idCourse], onDelete: NoAction, onUpdate: NoAction, map: "FK_Course_Chapter")
  lessons      lessons[]

  @@index([courseId], map: "FK_Course_Chapter_idx")
}

model courses {
  idCourse    Int          @id @default(autoincrement())
  titleCourse String?      @db.VarChar(255)
  price       Int?
  introduce   String?      @db.VarChar(255)
  image       String?      @db.VarChar(255)
  teacherId   Int
  isPublished Boolean?
  chapters    chapters[]
  users       users        @relation(fields: [teacherId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_Course")
  courseuser  courseuser[]
  purchase    purchase[]

  @@index([teacherId], map: "FK_User_Course_idx")
}

model courseuser {
  userId     Int
  courseId   Int
  isFinished Boolean?
  courses    courses  @relation(fields: [courseId], references: [idCourse], onDelete: NoAction, onUpdate: NoAction, map: "FK_Course_CourseUser")
  users      users    @relation(fields: [userId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_CourseUser")

  @@id([userId, courseId])
  @@index([courseId], map: "FK_Course_CourseUser_idx")
  @@index([userId], map: "FK_User_CourseUser_idx")
}

model lessons {
  idLessons    Int           @id @default(autoincrement())
  titleLessons String?       @db.VarChar(255)
  chapterId    Int
  isPublished  Boolean?
  orderLesson  Int?
  videoUrl     String?       @db.VarChar(255)
  assignments  assignments[]
  chapters     chapters      @relation(fields: [chapterId], references: [idChapter], onDelete: NoAction, onUpdate: NoAction, map: "FK_Chapter_Lessons")
  lessonuser   lessonuser[]
  quizzs       quizzs?
  videolesson  videolesson[]

  @@index([chapterId], map: "FK_Chapter_Lessons_idx")
}

model lessonuser {
  userId     Int
  lessonId   Int
  isFinished Boolean?
  lessons    lessons  @relation(fields: [lessonId], references: [idLessons], onDelete: NoAction, onUpdate: NoAction, map: "FK_Lesson_LessonUser")
  users      users    @relation(fields: [userId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_LessonUser")

  @@id([userId, lessonId])
  @@index([lessonId], map: "FK_Lesson_LessonUser_idx")
  @@index([userId], map: "FK_User_LessonUser_idx")
}

model questions {
  idQuestion   Int            @id @default(autoincrement())
  content      String?        @db.VarChar(255)
  Acontent     String?        @db.VarChar(255)
  Bcontent     String?        @db.VarChar(255)
  Ccontent     String?        @db.VarChar(255)
  Dcontent     String?        @db.VarChar(255)
  answer       String?        @db.VarChar(255)
  quizzId      Int
  quizzs       quizzs         @relation(fields: [quizzId], references: [idQuizz], onDelete: NoAction, onUpdate: NoAction, map: "FK_Quizz_Question")
  questionuser questionuser[]

  @@index([quizzId], map: "FK_Quizz_Question_idx")
}

model quizzs {
  idQuizz     Int         @id @default(autoincrement())
  nameQuizz   String?     @db.VarChar(255)
  description String?     @db.VarChar(255)
  idLessons   Int         @unique(map: "idLessons_UNIQUE")
  questions   questions[]
  lessons     lessons     @relation(fields: [idLessons], references: [idLessons], onDelete: NoAction, onUpdate: NoAction, map: "FK_Lesson_Quizz")
  quizzuser   quizzuser[]

  @@index([idLessons], map: "FK_Lesson_Quizz_idx")
}

model quizzuser {
  quizzId Int
  userId  Int
  isDone  Boolean?
  quizzs  quizzs   @relation(fields: [quizzId], references: [idQuizz], onDelete: NoAction, onUpdate: NoAction, map: "FK_Quizz_QuizzUser")
  users   users    @relation(fields: [userId], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_QuizzUser")

  @@id([quizzId, userId])
  @@index([quizzId], map: "FK_Quizz_QuizzUser_idx")
  @@index([userId], map: "FK_User_QuizzUser_idx")
}

model role {
  idRole   Int     @id @default(autoincrement())
  nameRole String? @db.VarChar(255)
  users    users[]
}

model users {
  idUser         Int              @id @default(autoincrement())
  username       String           @db.VarChar(255)
  roleId         Int
  password       String           @db.VarChar(255)
  dateCreate     DateTime?        @db.Date
  isLocked       Boolean?
  assignmentuser assignmentuser[]
  courses        courses[]
  courseuser     courseuser[]
  lessonuser     lessonuser[]
  purchase       purchase[]
  questionuser   questionuser[]
  quizzuser      quizzuser[]
  role           role             @relation(fields: [roleId], references: [idRole], onDelete: NoAction, onUpdate: NoAction, map: "FK_Role_User")

  @@index([roleId], map: "FK_Role_User_idx")
}

model videolesson {
  idVideo    Int     @id @default(autoincrement())
  idLesson   Int
  idAsset    String  @db.VarChar(255)
  idPlayback String? @db.VarChar(255)
  lessons    lessons @relation(fields: [idLesson], references: [idLessons], onDelete: NoAction, onUpdate: NoAction, map: "FK_Lesson_Video")

  @@index([idLesson], map: "FK_Lesson_Video_idx")
}

model payment {
  idPayment     Int       @id @default(autoincrement())
  idPurchase    Int
  amount        Int?
  paymentDate   DateTime? @db.Date
  paymentMethod String?   @db.VarChar(255)
  purchase      purchase  @relation(fields: [idPurchase], references: [idPurchase], onDelete: NoAction, onUpdate: NoAction, map: "FK_Purchase_Payment")

  @@index([idPurchase], map: "FK_Purchase_Payment_idx")
}

model purchase {
  idPurchase   Int       @id @default(autoincrement())
  idCourse     Int
  idUser       Int
  purchaseDate DateTime? @db.Date
  payment      payment[]
  courses      courses   @relation(fields: [idCourse], references: [idCourse], onDelete: NoAction, onUpdate: NoAction, map: "FK_Course_Purchase")
  users        users     @relation(fields: [idUser], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_Purchase")

  @@index([idCourse], map: "FK_Course_Purchase_idx")
  @@index([idUser], map: "FK_User_Purchase_idx")
}

model questionuser {
  idQuestion Int
  idUser     Int
  choiced    String?   @db.VarChar(1)
  isCorrect  Boolean?
  questions  questions @relation(fields: [idQuestion], references: [idQuestion], onDelete: NoAction, onUpdate: NoAction, map: "FK_Question")
  users      users     @relation(fields: [idUser], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_Users")

  @@id([idQuestion, idUser])
  @@index([idUser], map: "FK_Users_idx")
}
